#BlueJ class context
comment0.params=
comment0.target=Heap()
comment0.text=\n\ default\ (and\ only)\ constructor\ for\ the\ Heap\ class\n
comment1.params=
comment1.target=boolean\ isEmpty()
comment1.text=\n\ determines\ if\ the\ Heap\ has\ any\ elements\n\ @return\ true\ if\ empty,\ false\ if\ not\n
comment10.params=
comment10.target=void\ percolateDown()
comment10.text=\n\ moves\ the\ top\ element\ of\ the\ heap\ down,\ swapping\ it\n\ with\ its\ smallest\ child\ until\ it's\ smaller\ than\ both\n\ children\ or\ doesn't\ have\ any\ children\n\ (note\:\ my\ code\ is\ 10\ lines\ long,\ but\ uses\ auxiliary\ functions)\n
comment11.params=
comment11.target=void\ drawAsTree()
comment11.text=\n\ Prints\ out\ the\ Heap\ as\ a\ tree\ structure,\ useful\ for\ debugging\n
comment12.params=lines
comment12.target=java.lang.String\ makeSingleString(java.util.ArrayList)
comment12.text=\n\ Ignore\ everything\ from\ here\ on,\ unless\ you're\ a\ big\ masochist\n\ It\ was\ a\ pain\ to\ get\ the\ tree\ drawing\ to\ work\n
comment13.params=left\ leftWidth\ right\ rightWidth
comment13.target=java.util.ArrayList\ combine(java.util.ArrayList,\ int,\ java.util.ArrayList,\ int)
comment14.params=lines
comment14.target=int\ maxLength(java.util.ArrayList)
comment15.params=val\ num
comment15.target=java.lang.String\ copies(java.lang.String,\ int)
comment16.params=nodeNum\ branch
comment16.target=java.util.ArrayList\ drawTreeFromNode(int,\ java.lang.String)
comment2.params=obj
comment2.target=boolean\ add(java.lang.Object)
comment2.text=\n\ adds\ the\ given\ Object\ (which\ must\ be\ Comparable)\ to\n\ the\ Heap,\ percolating\ it\ up\ to\ its\ proper\ location\n\ @param\ x\ the\ Object\ to\ add\n\ @throws\ ClassCastException\ if\ x\ is\ not\ Comparable\n
comment3.params=
comment3.target=java.lang.Object\ peekMin()
comment3.text=\n\ returns\ the\ smallest\ Object\ in\ the\ Heap\n\ @return\ the\ smallest\ Object\ in\ the\ Heap\n\ @throws\ IndexOutOfBoundsException\ if\ the\ Heap\ is\ empty\n
comment4.params=
comment4.target=java.lang.Object\ remove()
comment4.text=\n\ removes\ and\ returns\ the\ smallest\ Object\ in\ the\n\ Heap,\ and\ then\ rearranges\ the\ remaining\ elements\n\ to\ make\ them\ a\ valid\ Heap\ again\n\ @return\ the\ smallest\ element\n\ @throws\ IndexOutOfBoundsException\ if\ the\ Heap\ is\ empty\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\n\ returns\ a\ String\ representation\ of\ this\ Heap\ as\ a\ list\ of\n\ all\ the\ node\ values\ in\ order\n\ @return\ a\ list\ of\ all\ node\ values\ in\ order\n
comment6.params=node
comment6.target=int\ parent(int)
comment6.text=\n\ returns\ the\ index\ of\ the\ parent\ node\ of\ the\ given\ node\n\ @param\ node\ the\ index\ of\ a\ given\ node\n\ @return\ the\ index\ of\ the\ parent\ of\ that\ node\n
comment7.params=node
comment7.target=int\ leftChild(int)
comment7.text=\n\ returns\ the\ index\ of\ the\ left\ child\ of\ a\ given\ node\n\ @param\ node\ the\ index\ of\ a\ given\ node\n\ @return\ the\ index\ of\ the\ node's\ left\ child\n
comment8.params=node
comment8.target=int\ rightChild(int)
comment8.text=\n\ returns\ the\ index\ of\ the\ rightChild\ of\ a\ given\ node\n\ @param\ node\ the\ index\ of\ a\ given\ node\n\ @return\ the\ index\ of\ the\ node's\ right\ child\n
comment9.params=
comment9.target=void\ percolateUp()
comment9.text=\n\ moves\ the\ last\ element\ of\ the\ heap\ up\ the\ array,\n\ swapping\ it\ with\ its\ parent\ until\ it\ is\ greater\ than\n\ its\ parent\ or\ it\ has\ reached\ the\ top\ of\ the\ Heap\n\ (note\:\ my\ code\ is\ 8\ lines\ long,\ but\ uses\ auxiliary\ functions)\n
numComments=17
