#BlueJ class context
comment0.params=
comment0.target=BinarySearchTree()
comment0.text=\n\ Construct\ the\ tree.\n
comment1.params=x
comment1.target=void\ insert(java.lang.Comparable)
comment1.text=\n\ Insert\ into\ the\ tree.\n\ @param\ x\ the\ item\ to\ insert.\n\ @throws\ DuplicateItemException\ if\ x\ is\ already\ present.\n
comment10.params=t
comment10.target=BinaryNode\ removeMin(BinaryNode)
comment10.text=\n\ Internal\ method\ to\ remove\ minimum\ item\ from\ a\ subtree.\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\n\ @return\ the\ new\ root.\n\ @throws\ ItemNotFoundException\ if\ x\ is\ not\ found.\n
comment11.params=
comment11.target=java.lang.Comparable\ findMin()
comment11.text=\n\ Find\ the\ smallest\ item\ in\ the\ tree.\n\ @return\ smallest\ item\ or\ null\ if\ empty.\n
comment12.params=t
comment12.target=BinaryNode\ findMin(BinaryNode)
comment12.text=\n\ Internal\ method\ to\ find\ the\ smallest\ item\ in\ a\ subtree.\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\n\ @return\ node\ containing\ the\ smallest\ item.\n
comment13.params=
comment13.target=java.lang.Comparable\ findMax()
comment13.text=\n\ Find\ the\ largest\ item\ in\ the\ tree.\n\ @return\ the\ largest\ item\ or\ null\ if\ empty.\n
comment14.params=t
comment14.target=BinaryNode\ findMax(BinaryNode)
comment14.text=\n\ Internal\ method\ to\ find\ the\ largest\ item\ in\ a\ subtree.\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\n\ @return\ node\ containing\ the\ largest\ item.\n
comment15.params=x
comment15.target=java.lang.Comparable\ find(java.lang.Comparable)
comment15.text=\n\ Find\ an\ item\ in\ the\ tree.\n\ @param\ x\ the\ item\ to\ search\ for.\n\ @return\ the\ matching\ item\ or\ null\ if\ not\ found.\n
comment16.params=x\ t
comment16.target=BinaryNode\ find(java.lang.Comparable,\ BinaryNode)
comment16.text=\n\ Internal\ method\ to\ find\ an\ item\ in\ a\ subtree.\n\ @param\ x\ is\ item\ to\ search\ for.\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\n\ @return\ node\ containing\ the\ matched\ item.\n
comment17.params=
comment17.target=void\ makeEmpty()
comment17.text=\n\ Make\ the\ tree\ logically\ empty.\n
comment18.params=
comment18.target=boolean\ isEmpty()
comment18.text=\n\ Test\ if\ the\ tree\ is\ logically\ empty.\n\ @return\ true\ if\ empty,\ false\ otherwise.\n
comment19.params=t
comment19.target=java.lang.Comparable\ elementAt(BinaryNode)
comment19.text=\n\ Internal\ method\ to\ get\ element\ field.\n\ @param\ t\ the\ node.\n\ @return\ the\ element\ field\ or\ null\ if\ t\ is\ null.\n
comment2.params=x\ t
comment2.target=BinaryNode\ insert(java.lang.Comparable,\ BinaryNode)
comment2.text=\n\ Internal\ method\ to\ insert\ into\ a\ subtree.\n\ @param\ x\ the\ item\ to\ insert.\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\n\ @return\ the\ new\ root.\n\ @throws\ DuplicateItemException\ if\ x\ is\ already\ present.\n
comment20.params=args
comment20.target=void\ main(java.lang.String[])
comment3.params=x\ t
comment3.target=void\ insertAVL(java.lang.Comparable,\ BinaryNode)
comment4.params=t
comment4.target=BinaryNode\ rotate(BinaryNode)
comment5.params=t
comment5.target=int\ height(BinaryNode)
comment6.params=t
comment6.target=int\ heightHelper(BinaryNode)
comment7.params=x
comment7.target=void\ remove(java.lang.Comparable)
comment7.text=\n\ Remove\ from\ the\ tree..\n\ @param\ x\ the\ item\ to\ remove.\n\ @throws\ ItemNotFoundException\ if\ x\ is\ not\ found.\n
comment8.params=x\ t
comment8.target=BinaryNode\ remove(java.lang.Comparable,\ BinaryNode)
comment8.text=\n\ Internal\ method\ to\ remove\ from\ a\ subtree.\n\ @param\ x\ the\ item\ to\ remove.\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\n\ @return\ the\ new\ root.\n\ @throws\ ItemNotFoundException\ if\ x\ is\ not\ found.\n
comment9.params=
comment9.target=void\ removeMin()
comment9.text=\n\ Remove\ minimum\ item\ from\ the\ tree.\n\ @throws\ ItemNotFoundException\ if\ tree\ is\ empty.\n
numComments=21
