import java.util.Set;import java.util.HashMap;import java.util.Iterator;import java.util.Random;/** * This class was extremely altered from its previous state. There are no unique rooms * in the game so exits are irrelevant and just create the illusion of important  * decisions being made. When ever a room is created, its exits are immediately and * randomly set. All the a rooms exits bring you back to the same room. */class Room {    private HashMap exits;        // stores exits of this room.    String doors = "";   //stores random exits assigned to the room    Room north, east, south, west, up, down; //All the possible directions        /**     * Create a room described "description". Initially, it has no exits.     * "description" is something like "a kitchen" or "an open court yard".     */    public Room()     {        //When a room is created it automatically randomly creates exits        exits = new HashMap();        setExits(this);        //All exits bring you back to the same room    }    /**     * Define the exits of this room.  Every direction either leads to     * another room or is null (no exit there).     */    public void setExits(Room r)     {        exits.put("forward", null);        exits.put("right", null);        exits.put("backward", null);        exits.put("left", null);        exits.put("up", null);        exits.put("down", null);        roomRandomizer();  //randomly pulls exits for a room         if(doors.indexOf("f")!=-1)            exits.put("forward", r);        if(doors.indexOf("r")!=-1)            exits.put("right", r);        if(doors.indexOf("b")!=-1)            exits.put("backward", r);        if(doors.indexOf("l")!=-1)            exits.put("left", r);        if(doors.indexOf("u")!=-1)            exits.put("up", r);        if(doors.indexOf("d")!=-1)            exits.put("down", r);        doors = "";    }    public void roomRandomizer()    {        //Randomly picks exits for room        int exit;        Random rand = new Random();        int x = rand.nextInt(9);        //There can be from 1 to 4 exits per room        if (x<4)            exit = 3;        else if (x<7)            exit = 2;        else if (x<9)            exit = 4;        else if (x==9)            exit = 1;        else            exit = -1;        //The loop picks number of exits (represented by letters) assigned to it        //no repeats are allowed        //loop continues till correct number of rooms are assigned to it        for(;exit>0;exit--)        {            Random r = new Random();            int n = r.nextInt(6);            if (n==0&&doors.indexOf("f")==-1)                doors=doors+"f";            else if (n==1&&doors.indexOf("r")==-1)                doors=doors+"r";            else if (n==2&&doors.indexOf("b")==-1)                doors=doors+"b";            else if (n==3&&doors.indexOf("l")==-1)                doors=doors+"l";            else if (n==4&&doors.indexOf("u")==-1)                doors=doors+"u";            else if (n==5&&doors.indexOf("d")==-1)                doors=doors+"d";            else                exit++;        }    }        private String exitString()    {        //Creates a string containing the rooms exits        String returnString = "Exits:";                if(this.nextRoom("forward")!=null)            returnString=returnString+" forward";        if(this.nextRoom("right")!=null)            returnString=returnString+" right";        if(this.nextRoom("backward")!=null)            returnString=returnString+" backward";        if(this.nextRoom("left")!=null)            returnString=returnString+" left";        if(this.nextRoom("up")!=null)            returnString=returnString+" up";        if(this.nextRoom("down")!=null)            returnString=returnString+" down";        return returnString;    }        public String longDescription()    {        //returns description of room        return exitString();    }        public Room nextRoom(String direction)     {        //keeps track of next room to be traveled to        return (Room)exits.get(direction);    }}