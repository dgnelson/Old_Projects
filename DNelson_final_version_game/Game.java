import javax.swing.JOptionPane;import java.util.Random;/** * This is the main class for the game. All the magic happens here. The basic play loop is relatively * untouched but many commands and the basic premise of game have been added. There are many aspects * to this class and they will each be referenced seprately in the methods. */class Game {    int play = JOptionPane.YES_OPTION; //controls the play again option    private Parser parser;  //reads and interprets the input strings    private Room currentRoom; //the only room in the game that the player actually keeps traveling to    int minotaur = 10;  //the players distance from the minotaur. If it reaches zero the game is over    int stamina = 100;  //A form of health system assigned to the player    String keyItems = "";  // keeps track of the players progress in obtaining the special weapon    String specialItems = "";  //keeps track of the special items the player has obtained    Weapon weapon;  //The weapon assigned to the player    Armor helmet;  //the helmet type armor assigned to the player    Armor chest;  //the chest type armor assigned to the player    Armor boots;  //the boots type armor assigned to the player    Mob mob = null;  //the mob a player encounters throughout the game    Weapon roomWeapon = null;  //stores the weapon that could be generated in a room and could be picked up by the player    Armor roomArmor = null;   //same thing as above but armor not weapon    boolean inBattle=false;  //boolean that keeps track of if youre in a battle    int charmEffect=0;  //changes if you have the charm special item    int cloakEffect=0;  //changes if you have the cloak special item    int roomCount=0;   //keeps track of the number of rooms traveled    int win=1;     //records if the minotaur was defeated or not    int difficulty;  //Stores if easy or hard mode was chosen    /**     * Create the game and initialise its internal map.     */    public Game()     {        createRooms();        parser = new Parser();    }    /**     * Create all the rooms and link their exits together.     */    private void createRooms()    {        currentRoom = new Room();    }        private void resetStats()    {        //resets for if the player wants to play again        stamina=100;        minotaur=10;        keyItems="";        specialItems="";        weapon=null;        helmet=null;        chest=null;        boots=null;        charmEffect=0;        cloakEffect=0;        roomCount=0;        win=1;    }    /**     *  Main play routine.  Loops until end of play.     */    public void play()     {                    //allows the player to play again        while (play == JOptionPane.YES_OPTION)        {            //determines the difficulty            difficulty=JOptionPane.showOptionDialog(null, "Pick difficulty", "", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new String[]{"Easy", "Hard"}, "default");            if(difficulty == JOptionPane.NO_OPTION)                difficulty=0;            else                difficulty=10;            printWelcome();            //the main while loop the runs the game            boolean finished=false;            while (! finished)            {                Command command = parser.getCommand();                finished = processCommand(command);            }            resetStats();            //asks the player to play again            play = JOptionPane.showConfirmDialog(null, "Play Again?", "", JOptionPane.YES_NO_OPTION);        }    }    /**     * Print out the opening message for the player.     */    private void printWelcome()    {        System.out.println();        System.out.println("Welcome to Survive The Labrynth");        System.out.println("Survive the minotaur and find your way out.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());        }    private boolean processCommand(Command command)     {        //gets, reads and reacts to commands        if(command.isUnknown())        {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help"))            printHelp();        else if (commandWord.equals("go"))            goRoom(command);        else if (commandWord.equals("take"))            takeItem();        else if (commandWord.equals("discard"))            discard(command);        else if (commandWord.equals("stats"))            stats();        else if (commandWord.equals("battle"))            System.out.println("You are not currently in battle!");        else if (commandWord.equals("faceMinotaur"))        {            faceMinotaur();            return true;        }        else if (commandWord.equals("quit"))        {            if(command.hasSecondWord())                System.out.println("Quit what?");            else                return true;  // signal that we want to quit        }        return false;    }    private void printHelp()     {        System.out.println();        System.out.println("You have stumbled into a treacherous labyrinth.");        System.out.println("It's walls are constantly in motion and it's filled with enemies");        System.out.println("Survive the minotaur and find your way out.");        System.out.println();        System.out.println("Your command words are:");        parser.showCommands();    }    private void goRoom(Command command)     {        //allows player to travel from room to room        //in my games case it really just generates new exits and a random event        if(!command.hasSecondWord())        {            // if there is no second word, we don't know where to go...            System.out.println("Go where?");            return;        }        String direction = command.getSecondWord();        Room nextRoom = currentRoom.nextRoom(direction);        if (nextRoom == null)            System.out.println("You walked into a wall... good job.");        else         {            roomCount++;  //adds one to rooms traveled            clearRoom();  //resets mob, weapon and armor in room            currentRoom.setExits(currentRoom); //changes exits            stamina = stamina-2;  //stamina lowers after a room is traveled            System.out.println();            System.out.println(currentRoom.longDescription());  //prints room exits            randomEvent();  //picks the random event            checkMinotaur();  //sees how close the minotaur is        }    }    private void limitStamina()    {        // prevents the stamin from going above 100 and forces you to face the minotaur if it hits 0        if (stamina>100)        {            stamina=100;        }        if (stamina<=0)        {            stamina=0;            System.out.println("You have collapsed out of exhaustion.");            faceMinotaur();        }    }    private void takeItem()    {        //allows you to pick up weapon or armor randomly generated in a room        if (roomWeapon!=null)        {            weapon=roomWeapon;            System.out.println("You have picked up an item.");            clearRoom();        }        else if (roomArmor!=null)        {            if(roomArmor.getType().equals("boots"))                boots=roomArmor;            else if(roomArmor.getType().equals("chest"))                chest=roomArmor;            else if(roomArmor.getType().equals("helmet"))                helmet=roomArmor;            System.out.println("You have picked up an item.");            clearRoom();        }        else            System.out.println("There is nothing to take.");    }    private void discard(Command command)    {        //allows player to delete items from their inventory        if(!command.hasSecondWord())        {            System.out.println("Discard what? weapon, helmet, chest or boots?");            return;        }        String item = command.getSecondWord();        if(item.equals("weapon"))            weapon=null;        else if(item.equals("helmet"))            helmet=null;        else if(item.equals("chest"))            chest=null;        else if(item.equals("boots"))            boots=null;        else            System.out.println("Discard what? weapon, helmet, chest or boots?");        if(item.equals("cheater"))            keyItems="electrified cattle prod";    }    private void keyItems()    {        //adds items to keyitems and assembles final item if all parts are obtained        if (keyItems.indexOf("long metal shaft")==-1&&!keyItems.equals("electrified cattle prod"))        {            keyItems=keyItems+"long metal shaft";            System.out.println("You have found a long metal shaft. It has been added to your key items.");        }        else if (keyItems.indexOf("thick metal coil")==-1&&!keyItems.equals("electrified cattle prod"))        {            keyItems=keyItems+",   thick metal coil";            System.out.println("You have found a thick metal coil. It has been added to your key items.");        }        else if (keyItems.indexOf("pointed taser-like prongs")==-1&&!keyItems.equals("electrified cattle prod"))        {            keyItems=keyItems+",   pointed taser-like prongs";            System.out.println("You have found pointed taser-like prongs. They have been added to your key items.");        }        else if (keyItems.indexOf("electrified cattle prod schematics")==-1&&!keyItems.equals("electrified cattle prod"))        {            keyItems=keyItems+",   electrified cattle prod schematics";            System.out.println("You have found electrified cattle prod schematics. They have been added to your key items.");        }        else         {            System.out.println("You have found the center of the maze. There are a pair of D cell batteries laying on the ground.");            System.out.println("You realize that these are the missing part according to the schematic so you quickly assemble the parts.");            System.out.println("You have obtained an electrified cattle prod!");            keyItems="electrified cattle prod";            faceMinotaur();        }    }    private void stats()    {        //prints all the player stats and inventory        //takes into account if certain special items are obtained        System.out.println();        if (specialItems.indexOf("energy oculus")!=-1)            System.out.println("Stamina: "+stamina+"/100");        else if (stamina<20)            System.out.println("Stamina: near death");        else if (stamina<40)            System.out.println("Stamina: low");        else if (stamina<70)            System.out.println("Stamina: moderate");        else if (stamina<90)            System.out.println("Stamina: high");        else            System.out.println("Stamina: god-like");        if (specialItems.indexOf("Marauder's map")!=-1)            System.out.println("Minotaur: "+minotaur+" steps");        else if (minotaur<3)            System.out.println("Minotaur: breathing down your neck");        else if (minotaur<5)            System.out.println("Minotaur: on your heels");        else if (minotaur<7)            System.out.println("Minotaur: a few steps behind");        else if (minotaur<9)            System.out.println("Minotaur: serveral strides");        else             System.out.println("Minotaur: lurking in the distance");        if (keyItems.length()!=0)            System.out.println("Key Items: "+keyItems);        else            System.out.println("Key Items: none");        if (specialItems.length()!=0)            System.out.println("Special Items: "+specialItems);        else            System.out.println("Special Items: none");        if (weapon!=null)            System.out.println("Weapon: "+weapon.getName());        else            System.out.println("Weapon: none");        if (helmet!=null)            System.out.println("Helmet: "+helmet.getName());        else            System.out.println("Helmet: none");        if (chest!=null)            System.out.println("Chest: "+chest.getName());        else            System.out.println("Chest: none");        if (boots!=null)            System.out.println("Boots: "+boots.getName());        else            System.out.println("Boots: none");    }    private void checkMinotaur()    {        //checks stamina and adjusts distance from minotaur accordingly        if(stamina<=30)            minotaur--;        else if (stamina>=95)            minotaur++;        if(minotaur>0)            return;        else            faceMinotaur();    }    private void randomEvent()    {        //picks of three of the basic random event categories        Random rand = new Random();        int event = rand.nextInt(100);        if(event<30+difficulty)            nothing();        else if(event<85-difficulty)            events();        else if(event<100)            items();    }    private void nothing()    {        //just prints a line to make the game more interesting        Random rand = new Random();        int event = rand.nextInt(8);        if(event==0)            System.out.println("You have entered and empty room");        if (event==1)            System.out.println("There's nothing in here.");        if (event==2)            System.out.println("You thought you heard a noise but there is nothing to be found.");        if (event==3)            System.out.println("Look! You found a... oh wait it's just a rock");        if (event==4)            System.out.println("Loneliness starts to envelope you. The labyrinth is taking its toll.");        if (event==5)            System.out.println("For a second you think you see something, but it's just your shadow.");        if (event==6)            System.out.println("It's quite. A little too quite...");        if (event==7)            System.out.println("You spot a skeleton on the ground and tremble in fear.");    }    private void events()    {        //randomly picks between a mob, good or bad event        Random rand = new Random();        int event = rand.nextInt(100);        if(event<20-cloakEffect)            mob();        else if(event<100)        {            Random r = new Random();            int outcome = r.nextInt(100);            if(outcome<50-charmEffect)                bad();            else if(outcome<100)                good();        }    }    private void items()    {        //randomly picks what type of item is obtained        Random rand = new Random();        int item = rand.nextInt(100);        if(item<50-difficulty*2)            item();        else if(item<75-difficulty/2)            keyItems();        else if(item<100)            specialItems();    }    private void mob()    {        //creates the mob and starts the battle scene        mob = new Mob(Mob.randomMob());        System.out.println("You have encountered a(n) "+mob.getName()+".");        System.out.println("Make a move! battle strong, battle normal or battle run?");        inBattle=true;        while(inBattle)        {            Command command = parser.getCommand();            strike(command);        }    }    private void strike(Command command)    {        //calculates outcomes of battles based on decisions made        String commandWord = command.getCommandWord();        if (!commandWord.equals("battle"))        {            System.out.println("You cannot do that! You are in battle! battle strong, battle normal or battle run.");            return;        }        String battle = command.getSecondWord();        if(!command.hasSecondWord()&&!battle.equals("strong")&&!battle.equals("normal")&&!battle.equals("run"))        {            System.out.println("What? battle strong, battle normal or battle run?");            return;        }        Random rand = new Random();        int difficulty = rand.nextInt(mob.getDifficulty());        if(battle.equals("strong")){            if(difficulty<3+getAttack()/4)            {                    System.out.println("You have defeated the beast without a hitch, leaving its entrails to ditract the minotaur.");                minotaur++;            }            else            {                System.out.println("You whiffed and the beast struck you before running away.");                stamina=stamina-(25/getDefense());            }            inBattle=false;        }        else if(battle.equals("normal")){            if(difficulty<5+getAttack()/4)            {                System.out.println("The beast has been slain but with minor damage taken.");                stamina=stamina-(10/getDefense());            }            else            {                System.out.println("The beast is dead but it left its mark.");                stamina=stamina-(15/getDefense());            }            inBattle=false;        }        else if(battle.equals("run")){            if(difficulty<4+getAttack()/4)            {                System.out.println("You successfully avoided the beast.");            }            else            {                System.out.println("You got away but barely");                stamina=stamina-(20/getDefense());            }            inBattle=false;        }    }    private void item()    {        //picks if a weapon or and armor is created and then prompts you to pick it up        Random rand = new Random();        int item = rand.nextInt(2);        if (item==0)        {            roomWeapon = new Weapon(Weapon.randomWeapon());            System.out.println("You have found a "+roomWeapon.getName()+" with a damage value of "+roomWeapon.getDamage()+".");            System.out.println("Enter 'take' to take the item.");        }        else if (item==1)        {            roomArmor = new Armor(Armor.randomArmor());            System.out.println("You have found a "+roomArmor.getName()+" with a protection value of "+roomArmor.getProtection()+".");            System.out.println("Enter 'take' to take the item.");        }    }    private void clearRoom()    {        //emptys room        roomWeapon=null;        roomArmor=null;        mob=null;    }    private int getAttack()    {        //get players attack value        int attack=3;        if(weapon!=null)            attack=attack+weapon.getDamage();        return attack;    }    private int getDefense()    {        //gets players defense value        int defense=3;        if(boots!=null)            defense=defense+boots.getProtection();        if(chest!=null)            defense=defense+chest.getProtection();        if(helmet!=null)            defense=defense+helmet.getProtection();        return defense;    }    private void bad()    {        //pick outcomes of random bad events. could lose stamina or distance from minotaur        Random rand = new Random();        int bad = rand.nextInt(8);        if (bad<3){            stamina=stamina-5;            pickTrap();        }        else if (bad<5){            stamina=stamina-7;            pickTrap();        }        else if (bad<6){            stamina=stamina-10;            pickTrap();        }        else if (bad<8){            minotaur--;            minoDown();        }    }    private void pickTrap()    {        //prints stamina effecting bad event outcome        Random rand = new Random();        int trap = rand.nextInt(10);        if(trap==0)            System.out.println("You walked into bear trap.");        if(trap==1)            System.out.println("A piece of the maze fell from the ceiling and landed on you.");        if(trap==2)            System.out.println("You stumbled on a piece of the cracked stone floor.");        if(trap==3)            System.out.println("A sharp rock edge on the wall cut your arm.");        if(trap==4)            System.out.println("A large rat scurries by and bit your leg.");        if(trap==5)            System.out.println("You walk into some spider webs and are temporarily blinded.");        if(trap==6)            System.out.println("You step on a snake and it coils back and strikes.");        if(trap==7)            System.out.println("A labyrinth wall quickly slides and crushes your leg.");        if(trap==8)            System.out.println("A pack of bats whiz by scratching your face.");        if(trap==9)            System.out.println("You get shot by an arrow that was set off by a trip wire.");    }    private void minoDown()    {        //prints minotaur effecting bad event outcome        Random rand = new Random();        int down = rand.nextInt(5);        if(down==0)            System.out.println("You trip and twist your ankle allowing the minotaur to lessen its distcance.");        if(down==1)            System.out.println("You cut your leg on a thorny vine. The minotaur finds your blood trail.");        if(down==2)            System.out.println("A spider bites you, poisoning you and slowing your pace.");        if(down==3)            System.out.println("You inhale a strange spore and doze off for a moment, allowing to minotuar to come closer.");        if(down==4)            System.out.println("A chunk of the wall falls off and crushes your toe. The minotaur takes the opportunity to catch up.");    }    private void good()    {        //picks random good event. could effect stamina or distance from minotaur        Random rand = new Random();        int good = rand.nextInt(8);        if (good<3){            pickGood();            stamina=stamina+5;        }        else if (good<5){            pickGood();            stamina=stamina+7;        }        else if (good<6){            pickGood();            stamina=stamina+10;        }        else if (good<8){            minoUp();            minotaur++;        }    }    private void pickGood()    {        //prints stamina effecting good event outcome        Random rand = new Random();        int up = rand.nextInt(10);        if(up==0)            System.out.println("You find some of the gods' ambrosia.");        if(up==1)            System.out.println("You find some bandages to protect your wounds.");        if(up==2)            System.out.println("You come across a loaf bread and immeadiately and ease your hunger.");        if(up==3)            System.out.println("A memory of the outside world raises your spirits.");        if(up==4)            System.out.println("You find a flask a wine.");        if(up==5)            System.out.println("A stream of fresh water flows from the ground and you quench your thirst.");        if(up==6)            System.out.println("The sounds of birds chirping in the distance revitalizes your spirit.");        if(up==7)            System.out.println("You find a container of healing herb ointment.");        if(up==8)            System.out.println("The gods hear your prayers and refill some of your strength");        if(up==9)            System.out.println("A sweet melody in sung in the distance and comforts you.");    }    private void minoUp()    {        //picks minotaur distance good event outcome        Random rand = new Random();        int up = rand.nextInt(5);        if(up==0)            System.out.println("You avoid a bear trap and prepare it for the minotaur to set off.");        if(up==1)            System.out.println("Hermes blesses you and your pace quickens leaving the minotaur in your dust.");        if(up==2)            System.out.println("You hear the minotaur wimper far behing you.");        if(up==3)            System.out.println("Athena pities you and strengthens your body. This allows you to gain distance on the minotaur.");        if(up==4)            System.out.println("You shatter a jar and leaves pieces behind for the minotaur to step on.");    }    private void specialItems()    {        //picks special items for the player to obtain        Random rand = new Random();        int item = rand.nextInt(4);        if(item==0&&specialItems.indexOf("invisibility cloak")==-1)        {            System.out.println("You have found a cloak of invisibility. It lowers your chances of encountering mobs.");            specialItems=specialItems+"   invisibility cloak";            cloakEffect=cloakEffect+5;        }        else if(item==1&&specialItems.indexOf("Marauder's map")==-1)        {            System.out.println("You have found the Marauder's map. It allows you to know your exact distance from the minotaur.");            specialItems=specialItems+"   Marauder's map";        }        else if(item==2&&specialItems.indexOf("energy oculus")==-1)        {            System.out.println("You have found an energy oculus. It allows you to know your exact stamina value.");            specialItems=specialItems+"   energy oculus";        }        else if(item==3&&specialItems.indexOf("Tyche's charm of luck")==-1)        {            System.out.println("You have found Tyche's charm of luck. It lowers the chance of negative events.");            specialItems=specialItems+"   Tyche's charm of luck";            charmEffect=charmEffect+10;        }    }    private void faceMinotaur()    {        //Final battle scene with minotaur        System.out.println();        System.out.println();        System.out.println();        System.out.println();        System.out.println("The minotaur has caught up!");        System.out.println("It charges with eyes lit fire red.");        if(keyItems.equals("electrified cattle prod"))        {            //automatically win with final key item            System.out.println("You panic at first but then you realize you have the upper hand.");            System.out.println("You quickly pull out the prod, activate it and plunge it deep into the minotaur.");            System.out.println("The great beast roars in anguish and then falls dead to the ground.");            win++;        }        else        {            Random rand = new Random();            int battle = rand.nextInt(100);            //some random luck to win without keyitem            if (battle<15+getAttack()+getDefense()&&roomCount>10)            {                System.out.println("You stare right back at it and with equal intensity charge forward.");                System.out.println("A large cloud of dust is kicked up obscuring the view of the battle.");                System.out.println("When the battle cries cease and the dust settles you are miraculously still standing");                System.out.println("You raise you fist and yell in victory.");                win++;            }            else            {                System.out.println("You are frozen in place with fear and are unable to react.");                System.out.println("The minotaur thrashes into you and knocks you into the wall.");                System.out.println("You body lays there motionless and lifeless.");            }        }        System.out.println();        System.out.println();        System.out.println();        System.out.println("Thank you for playing Survive The Labyrinth");        //prints final score        int finalScore=(roomCount+stamina+getItemScore())*win*(100/(difficulty+1));        System.out.println("Your final score is "+finalScore);    }    private int getItemScore()    {        //calculates item aspect of final score        int score=0;        if(weapon!=null)            score=score+10+weapon.getDamage()*2;        if(helmet!=null)            score=score+10+helmet.getProtection()*2;        if(chest!=null)            score=score+10+chest.getProtection()*2;        if(boots!=null)            score=score+10+boots.getProtection()*2;        if(keyItems.equals("electrified cattle prod"))            score=score+50;        return score;    }}